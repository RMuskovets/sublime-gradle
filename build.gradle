import groovy.json.*
import org.cyberneko.html.parsers.SAXParser
import org.apache.tools.ant.filters.ReplaceTokens

/**
 * External dependencies for the build script
 * @see http://www.gradle.org/docs/current/userguide/userguide_single.html#sec:external_dependencies
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.1.6',
                    'net.sourceforge.nekohtml:nekohtml:1.9.18'
    }
}

archivesBaseName = 'sublime-gradle'

ext {
    gradleDoc = 'http://www.gradle.org/docs/current/dsl'
    topLevelCompletion = [] as Set
    autoGeneratedProjectPatterns = new StringBuilder()
    autoGeneratedTaskPatterns = new StringBuilder().append("    patterns:\n")
}

task createCompletions << {
    cleanFiles()

    def parser = new XmlSlurper(new org.cyberneko.html.parsers.SAXParser())

    def links = findAllApiLinks(parser)

    links.each { link ->
        if (link =~ "api.Project") {
            createCompletionsForProject(parser, link)
        } else {
            createCompletionsForTask(parser, link)
        }
    }
    //println autoGeneratedProjectPatterns
}

task buildLanguageFile(type: Copy) {
    dependsOn createCompletions
    //TODO: input file and input properties
    //autoGeneratedProjectPatterns.append("some words")
    
    from './resources/gradle.YAML-tmLanguage'
    into projectDir
    //filter(ReplaceTokens, tokens: ['project-patterns': { autoGeneratedProjectPatterns.toString() }])
} << {
    ant.replace(file: "${projectDir}/gradle.YAML-tmLanguage", , token: "@project-patterns@", value: autoGeneratedProjectPatterns.toString())
    ant.replace(file: "${projectDir}/gradle.YAML-tmLanguage", , token: "@auto-generated-tasks@", value: autoGeneratedTaskPatterns.toString())
}

def cleanFiles() {
    file('./completions').deleteDir()
    file('./completions').mkdir()
}

def createCompletionsForProject(parser, link) {
    println "Creating top-level completions from Project"

    def json = new JsonBuilder()
    def items = getLiteralsFromLink(parser, link)

    writeCompletions(json, "source.gradle", items)
    writeHighlightingInfoForProject(items)
}

def createCompletionsForTask(parser, link) {
    println "Creating completions for ${link}"
    
    def json = new JsonBuilder()
    def taskName = link - "org.gradle.api.tasks." - ".html"
    def items = getLiteralsFromLink(parser, link)
    
    writeCompletions(json, "${taskName}.tasks.body.source.gradle", items)
    writeHighlightingInfoForTask(taskName, items)
    addToTopLevelCompletions(taskName)
}

def getLiteralsFromLink(parser, link) {
    def literals = [] as Set
    parser.parse("$gradleDoc/$link").'**'.findAll {
        it.name() == 'H4' && it.@class == 'signature'
    }.each {
        it.CODE.findAll {
            it.@class == 'literal'
        }.each {
            literals << it.text()
        }
    }
    return literals
}

def writeCompletions(json, scopeName, items) {
    def completionMap = []
    items.each {
        completionMap << [trigger: it, contents:it]
    }

    json scope: scopeName, completions: completionMap
    file("./completions/${scopeName}.sublime-completions").write(json.toPrettyString())
}

//TODO: Just initialize the beginning of the repo section into the string builder during config or something
//then keep appending same as with projects
def writeHighlightingInfoForTask(taskName, items) {
    autoGeneratedTaskPatterns.append("      - name: ${taskName}.task.source.gradle\n")
    autoGeneratedTaskPatterns.append("        begin: '\\s*(task)\\s+(\\w+)\\s*\\(.*type: ${taskName}.*\\)\\s*{'\n")
    autoGeneratedTaskPatterns.append("        beginCaptures:\n")
    autoGeneratedTaskPatterns.append("          '1': {name: keyword.task.source.gradle}\n")
    autoGeneratedTaskPatterns.append("          '2': {name: entity.name.function}\n")
    autoGeneratedTaskPatterns.append("        end: '}'\n")
    autoGeneratedTaskPatterns.append("        contentName: '${taskName}.tasks.body.source.gradle'\n")
    autoGeneratedTaskPatterns.append("        patterns:\n")
    autoGeneratedTaskPatterns.append("          - include: '#project-patterns'\n")
    items.each {
        autoGeneratedTaskPatterns.append("          - name: support.function.task.${taskName}.gradle\n")
        autoGeneratedTaskPatterns.append("            match: ${it}\n")
    }
    autoGeneratedTaskPatterns.append("          - include: source.groovy\n")
    autoGeneratedTaskPatterns.append("\n")
}

def writeHighlightingInfoForProject(items) {
    autoGeneratedProjectPatterns.append("patterns:\n")
    items.each {
        autoGeneratedProjectPatterns.append("      - name: support.function.project.${it}.gradle\n")
        autoGeneratedProjectPatterns.append("        match: ${it}\n")
    }
}

def addToTopLevelCompletions(scopeName) {

}

def findAllApiLinks(parser) {
    def links = [] as Set
    parser.parse(gradleDoc).'**'.findAll {
        it.name() == 'A' && it['@href'] =~ /^org\.gradle\.api/
    }.each {
        def link = it['@href'].toString().replaceAll(/\#.*/, '')
        links << link
    }
    return links
}

task createPackages {
    doFirst {
        assert archivesBaseName
        assert version != 'unspecified'
        ext.homepage = "https://github.com/koizuss/$archivesBaseName"
        ext.url = "${ext.homepage}/zipball/master"
    }

    doLast {
        def json = new JsonBuilder()
        json schema_version: '1.2', packages: [
            [
                "name": archivesBaseName,
                "description": "Support for use Gradle on Sublime Text 2",
                "author": "koizuss.apps@gmail.com",
                "homepage": homepage,
                "last_modified": new Date().format('yyyy-MM-dd HH:mm:ss'),
                "platforms": [
                    "*": [
                        [
                            "version": version,
                            "url": url
                        ]
                    ]
                ]
            ]
        ]

        file('./packages.json').write(json.toPrettyString())
    }
}